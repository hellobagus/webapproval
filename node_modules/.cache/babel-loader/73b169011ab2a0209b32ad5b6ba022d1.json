{"ast":null,"code":"import { userConstants } from \"../constants\";\nimport * as userService from \"../services\";\nimport UserControl from \"../data/userControl\";\nimport { alertActions } from \"./\";\nimport { history } from \"../helpers\";\nexport const login = (email, password) => async dispatch => {\n  dispatch(request());\n\n  try {\n    const user = await userService.loginUser(email, password);\n    dispatch(success(user.Data));\n    console.log(user);\n    history.push(\"/\"); // alert(\"JSON.stringify(user)\");\n  } catch (error) {\n    alert(error);\n    dispatch(failure(error));\n  } // return (dispatch) => {\n  //   dispatch(request());\n  //   userService.loginUser(email, password).then(\n  //     (user) => {\n  //       dispatch(success(user));\n  //       console.log(user);\n  //       history.push(\"/\");\n  //     },\n  //     (error) => {\n  //       dispatch(failure(error));\n  //       dispatch(alertActions.error(error));\n  //     }\n  //   );\n  // };\n\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n};\n\nfunction logout() {\n  return {\n    type: userConstants.LOGOUT\n  };\n}\n\nexport const getEmps = userId => async dispatch => {\n  dispatch(request());\n\n  try {\n    const empList = await userService.getEmp(userId);\n    dispatch(success(empList));\n  } catch (error) {\n    dispatch(failure(error));\n  } // return (dispatch) => {\n  //   dispatch(request(userId));\n  //   userService.getEmp(userId).then(\n  //     (empList) => dispatch(success(empList)),\n  //     (error) => dispatch(failure(error))\n  //   );\n  // };\n\n\n  function request() {\n    return {\n      type: userConstants.GETEMP_REQUEST\n    };\n  }\n\n  function success(empList) {\n    return {\n      type: userConstants.GETEMP_SUCCESS,\n      empList\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.GETEMP_FAILURE,\n      error\n    };\n  }\n};","map":{"version":3,"sources":["/Users/bagus/Appiness_APP/src/actions/user.actions.js"],"names":["userConstants","userService","UserControl","alertActions","history","login","email","password","dispatch","request","user","loginUser","success","Data","console","log","push","error","alert","failure","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","logout","LOGOUT","getEmps","userId","empList","getEmp","GETEMP_REQUEST","GETEMP_SUCCESS","GETEMP_FAILURE"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,OAAO,KAAKC,WAAZ,MAA6B,aAA7B;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,SAASC,YAAT,QAA6B,IAA7B;AACA,SAASC,OAAT,QAAwB,YAAxB;AAIA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAMC,QAAN,IAAiB;AACzDA,EAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;;AACA,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMT,WAAW,CAACU,SAAZ,CAAsBL,KAAtB,EAA6BC,QAA7B,CAAnB;AACAC,IAAAA,QAAQ,CAACI,OAAO,CAACF,IAAI,CAACG,IAAN,CAAR,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAN,IAAAA,OAAO,CAACY,IAAR,CAAa,GAAb,EAJE,CAMF;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACAT,IAAAA,QAAQ,CAACW,OAAO,CAACF,KAAD,CAAR,CAAR;AACD,GAZwD,CAezD;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAASR,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,WAAO;AAAEU,MAAAA,IAAI,EAAEpB,aAAa,CAACqB,aAAtB;AAAqCX,MAAAA;AAArC,KAAP;AACD;;AACD,WAASE,OAAT,CAAiBF,IAAjB,EAAuB;AACrB,WAAO;AAAEU,MAAAA,IAAI,EAAEpB,aAAa,CAACsB,aAAtB;AAAqCZ,MAAAA;AAArC,KAAP;AACD;;AACD,WAASS,OAAT,CAAiBF,KAAjB,EAAwB;AACtB,WAAO;AAAEG,MAAAA,IAAI,EAAEpB,aAAa,CAACuB,aAAtB;AAAqCN,MAAAA;AAArC,KAAP;AACD;AACF,CAzCM;;AA2CP,SAASO,MAAT,GAAkB;AAChB,SAAO;AAAEJ,IAAAA,IAAI,EAAEpB,aAAa,CAACyB;AAAtB,GAAP;AACD;;AAED,OAAO,MAAMC,OAAO,GAAIC,MAAD,IAAY,MAAOnB,QAAP,IAAoB;AAErDA,EAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;;AACA,MAAI;AACF,UAAMmB,OAAO,GAAG,MAAM3B,WAAW,CAAC4B,MAAZ,CAAmBF,MAAnB,CAAtB;AACAnB,IAAAA,QAAQ,CAACI,OAAO,CAACgB,OAAD,CAAR,CAAR;AACC,GAHH,CAGI,OAAOX,KAAP,EAAc;AACdT,IAAAA,QAAQ,CAACW,OAAO,CAACF,KAAD,CAAR,CAAR;AAED,GATkD,CAWrD;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,WAASR,OAAT,GAAmB;AACjB,WAAO;AAAEW,MAAAA,IAAI,EAAEpB,aAAa,CAAC8B;AAAtB,KAAP;AACD;;AACD,WAASlB,OAAT,CAAiBgB,OAAjB,EAA0B;AACxB,WAAO;AAAER,MAAAA,IAAI,EAAEpB,aAAa,CAAC+B,cAAtB;AAAsCH,MAAAA;AAAtC,KAAP;AACD;;AACD,WAAST,OAAT,CAAiBF,KAAjB,EAAwB;AACtB,WAAO;AAAEG,MAAAA,IAAI,EAAEpB,aAAa,CAACgC,cAAtB;AAAsCf,MAAAA;AAAtC,KAAP;AACD;AACF,CA7BM","sourcesContent":["import { userConstants } from \"../constants\";\nimport * as userService from \"../services\";\nimport UserControl from \"../data/userControl\"\nimport { alertActions } from \"./\";\nimport { history } from \"../helpers\";\n\n\n\nexport const login = (email, password) => async dispatch =>{ \n  dispatch(request());\n  try {\n    const user = await userService.loginUser(email, password);\n    dispatch(success(user.Data));\n    console.log(user);\n    history.push(\"/\");\n\n    // alert(\"JSON.stringify(user)\");\n  } catch (error) {\n    alert(error);\n    dispatch(failure(error));\n  }\n\n\n  // return (dispatch) => {\n  //   dispatch(request());\n\n  //   userService.loginUser(email, password).then(\n  //     (user) => {\n  //       dispatch(success(user));\n  //       console.log(user);\n\n  //       history.push(\"/\");\n  //     },\n  //     (error) => {\n  //       dispatch(failure(error));\n  //       dispatch(alertActions.error(error));\n  //     }\n  //   );\n  // };\n\n  function request(user) {\n    return { type: userConstants.LOGIN_REQUEST, user };\n  }\n  function success(user) {\n    return { type: userConstants.LOGIN_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: userConstants.LOGIN_FAILURE, error };\n  }\n}\n\nfunction logout() {\n  return { type: userConstants.LOGOUT };\n}\n\nexport const getEmps = (userId) => async (dispatch) => {\n\n  dispatch(request());\n  try {\n    const empList = await userService.getEmp(userId);\n    dispatch(success(empList))\n    } catch (error) {\n      dispatch(failure(error))\n\n    }\n  \n  // return (dispatch) => {\n  //   dispatch(request(userId));\n\n  //   userService.getEmp(userId).then(\n  //     (empList) => dispatch(success(empList)),\n  //     (error) => dispatch(failure(error))\n  //   );\n  // };\n\n  function request() {\n    return { type: userConstants.GETEMP_REQUEST };\n  }\n  function success(empList) {\n    return { type: userConstants.GETEMP_SUCCESS, empList };\n  }\n  function failure(error) {\n    return { type: userConstants.GETEMP_FAILURE, error };\n  }\n}"]},"metadata":{},"sourceType":"module"}